From 580bd503812b380ab71530f014ee945f77cb20b0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L!=CE=B5sA=CE=BC=CE=B5r?= <liesauer@liesauer.net>
Date: Thu, 28 Nov 2019 21:32:43 +0800
Subject: [PATCH] use pre install sdk

---
 init-tools.cmd | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/init-tools.cmd b/init-tools.cmd
index 0c3ca90a..627b0806 100644
--- a/init-tools.cmd
+++ b/init-tools.cmd
@@ -51,7 +51,10 @@ set DOTNET_ZIP_NAME=dotnet-sdk-%DOTNET_VERSION%-win-x64.zip
 set DOTNET_REMOTE_PATH=https://dotnetcli.azureedge.net/dotnet/Sdk/%DOTNET_VERSION%/%DOTNET_ZIP_NAME%
 set DOTNET_LOCAL_PATH=%DOTNET_PATH%%DOTNET_ZIP_NAME%
 echo Installing '%DOTNET_REMOTE_PATH%' to '%DOTNET_LOCAL_PATH%' >> "%INIT_TOOLS_LOG%"
-powershell -NoProfile -ExecutionPolicy unrestricted -Command "$retryCount = 0; $success = $false; do { try { (New-Object Net.WebClient).DownloadFile('%DOTNET_REMOTE_PATH%', '%DOTNET_LOCAL_PATH%'); $success = $true; } catch { if ($retryCount -ge 6) { throw; } else { $retryCount++; Start-Sleep -Seconds (5 * $retryCount); } } } while ($success -eq $false); Add-Type -Assembly 'System.IO.Compression.FileSystem' -ErrorVariable AddTypeErrors; if ($AddTypeErrors.Count -eq 0) { [System.IO.Compression.ZipFile]::ExtractToDirectory('%DOTNET_LOCAL_PATH%', '%DOTNET_PATH%') } else { (New-Object -com shell.application).namespace('%DOTNET_PATH%').CopyHere((new-object -com shell.application).namespace('%DOTNET_LOCAL_PATH%').Items(),16) }" >> "%INIT_TOOLS_LOG%"
+set PREINSTALL_DOTNET_DIR=%~dp0PreInstallSdks
+set PREINSTALL_DOTNET_SDK=%PREINSTALL_DOTNET_DIR%/%DOTNET_ZIP_NAME%
+echo Installing '%DOTNET_REMOTE_PATH%' to '%DOTNET_LOCAL_PATH%'
+powershell -NoProfile -ExecutionPolicy unrestricted -Command "$retryCount = 0; $success = $false; if ((Test-Path '%PREINSTALL_DOTNET_SDK%')) { Copy-Item -Path '%PREINSTALL_DOTNET_SDK%' -Destination '%DOTNET_LOCAL_PATH%' -Force } else { echo 'Downloading %DOTNET_REMOTE_PATH% to %DOTNET_LOCAL_PATH%'; do { try { (New-Object Net.WebClient).DownloadFile('%DOTNET_REMOTE_PATH%', '%DOTNET_LOCAL_PATH%'); $success = $true; } catch { if ($retryCount -ge 6) { throw; } else { $retryCount++; Start-Sleep -Seconds (5 * $retryCount); } } } while ($success -eq $false); } Add-Type -Assembly 'System.IO.Compression.FileSystem' -ErrorVariable AddTypeErrors; if ($AddTypeErrors.Count -eq 0) { [System.IO.Compression.ZipFile]::ExtractToDirectory('%DOTNET_LOCAL_PATH%', '%DOTNET_PATH%') } else { (New-Object -com shell.application).namespace('%DOTNET_PATH%').CopyHere((new-object -com shell.application).namespace('%DOTNET_LOCAL_PATH%').Items(),16) }" >> "%INIT_TOOLS_LOG%"
 if NOT exist "%DOTNET_LOCAL_PATH%" (
   echo ERROR: Could not install dotnet cli correctly. See '%INIT_TOOLS_LOG%' for more details. 1>&2
   exit /b 1
-- 
2.19.1.windows.1

